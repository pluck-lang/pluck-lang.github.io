2:I[25250,["668","static/chunks/668-601e0b47256e143f.js","250","static/chunks/250-6ca3c26bd787eb26.js","931","static/chunks/app/page-20f1b752c05e93dc.js"],""]
3:I[39272,["668","static/chunks/668-601e0b47256e143f.js","250","static/chunks/250-6ca3c26bd787eb26.js","931","static/chunks/app/page-20f1b752c05e93dc.js"],""]
4:I[60102,["668","static/chunks/668-601e0b47256e143f.js","250","static/chunks/250-6ca3c26bd787eb26.js","931","static/chunks/app/page-20f1b752c05e93dc.js"],""]
6:I[69462,["668","static/chunks/668-601e0b47256e143f.js","250","static/chunks/250-6ca3c26bd787eb26.js","931","static/chunks/app/page-20f1b752c05e93dc.js"],""]
7:I[13071,["250","static/chunks/250-6ca3c26bd787eb26.js","185","static/chunks/app/layout-e5ddc09160139ddb.js"],""]
8:I[87515,["250","static/chunks/250-6ca3c26bd787eb26.js","185","static/chunks/app/layout-e5ddc09160139ddb.js"],""]
9:I[5613,[],""]
a:I[31778,[],""]
5:T439,(define-type non-terminal (Sent) (NP) (VP) (Verb) (VT) (Det) (Adj) (Noun) (Conj))
(define-type terminal (the_) (a_) (cat_) (dog_) (barks_) (eats_) (bone_) (happy_) (sad_) (tasty_) (and_) (but_))

(define (generate-english nt)
  (match nt
    Sent => (discrete
              ((append (generate-english (NP)) (generate-english (VP))) 0.7)
              ((append (append (generate-english (NP)) (generate-english (VP)))
                       (append (generate-english (Conj)) (generate-english (Sent)))) 0.3))
    Conj => (Cons (uniform (and_) (but_)) (Nil))
    NP => (append (generate-english (Det)) (generate-english (Noun)))
    VP => (uniform (generate-english (Verb)) (append (generate-english (VT)) (generate-english (NP))))
    Verb => (Cons (uniform (barks_) (eats_)) (Nil))
    VT => (Cons (eats_) (Nil))
    Adj => (Cons (uniform (happy_) (sad_) (tasty_)) (Nil))
    Det => (Cons (uniform (the_) (a_)) (Nil))
    Noun => (discrete ((append (generate-english (Adj)) (generate-english (Noun))) 0.3)
                      ((Cons (uniform (cat_) (dog_) (bone_)) (Nil)) 0.7))))0:["tpm9OtSP7_IPob1h4c0YQ",[[["",{"children":["__PAGE__",{}]},"$undefined","$undefined",true],["",{"children":["__PAGE__",{},["$L1",["$","div",null,{"className":"relative isolate","children":[["$","div",null,{"className":"relative pt-6 sm:pt-14","children":["$","div",null,{"className":"py-10 sm:py-24 lg:py-32","children":["$","div",null,{"className":"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8","children":["$","div",null,{"className":"mx-auto max-w-2xl text-center","children":[["$","div",null,{"className":"flex flex-col items-center mb-2","children":[["$","img",null,{"src":"/pluck-feather.png","alt":"Pluck feather logo","className":"h-16 w-auto mb-4","style":{"filter":"invert(41%) sepia(98%) saturate(2227%) hue-rotate(172deg) brightness(97%) contrast(101%)"}}],["$","h1",null,{"className":"text-5xl font-bold tracking-tight text-gray-900 sm:text-6xl text-center mb-2","children":"Pluck"}],["$","div",null,{"className":"text-2xl sm:text-3xl font-medium text-gray-700 text-center","children":"Probabilistic Programming with Lazy Inference"}]]}],["$","p",null,{"className":"mt-6 text-lg leading-8 text-gray-600","children":["Pluck is a probabilistic programming language with efficient inference based on  ",["$","$L2",null,{"href":"https://dl.acm.org/doi/10.1145/3729325","className":"text-primary-600 hover:text-primary-500","children":"lazy knowledge compilation"}],". It supports higher-order functions, many recursive programs, and recursive types."]}],["$","div",null,{"className":"mt-10 flex flex-col sm:flex-row items-center justify-center gap-4","children":[["$","a",null,{"href":"#quickstart","className":"rounded-md bg-primary-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-primary-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600","children":"Get started"}],["$","$L2",null,{"href":"/docs","className":"rounded-md bg-white border border-primary-600 px-3.5 py-2.5 text-sm font-semibold text-primary-600 shadow-sm hover:bg-primary-50 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600","children":"Read the docs"}],["$","$L2",null,{"href":"https://dl.acm.org/doi/10.1145/3729325","className":"rounded-md bg-white border border-primary-600 px-3.5 py-2.5 text-sm font-semibold text-primary-600 shadow-sm hover:bg-primary-50 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600","children":"Read the paper"}]]}]]}]}]}]}],["$","div",null,{"id":"quickstart","className":"border-l-4 border-blue-400 bg-blue-50 p-6 mb-12 rounded-md max-w-3xl mx-auto px-4 sm:px-6 lg:px-8","children":[["$","h2",null,{"className":"text-lg font-semibold text-blue-800 mb-2 flex items-center","children":"Quick Start"}],["$","p",null,{"className":"mb-2 text-gray-700","children":"Install Pluck and run your first program:"}],["$","$L3",null,{"code":"# In your shell:\ngit clone --recurse-submodules https://github.com/mlb2251/Pluck.jl.git\ncd Pluck.jl\n\n# Compile the rsdd library (required for Pluck)\ncd src/RSDD/rsdd\ncargo build --release --features ffi\ncd ../../..\n\n# In Julia:\nusing Pkg\nPkg.activate(\".\")\nPkg.instantiate()\nusing Pluck\nload_pluck_file(\"programs/simple_example.pluck\");","output":"num-greater-than-five:\n  false  0.706\n  true   0.294\nposterior-given-less-than-five:\n  1      0.243\n  0      0.221\n  2      0.214\n  3      0.178\n  4      0.144","codeLanguage":"bash","outputLanguage":"text","codeLabel":"Install & Run","outputLabel":"Expected Output"}]]}],["$","div",null,{"className":"space-y-10 max-w-3xl mx-auto px-4 sm:px-6 lg:px-8","children":[["$","div",null,{"children":[["$","h3",null,{"className":"text-xl font-semibold mb-1","children":"Expressive, Lazy, Functional Programs"}],["$","p",null,{"className":"mb-3 text-gray-700","children":"Pluck programs are expressive functional programs, that can also make (discrete) random choices. It supports lazy algebraic data types, higher-order functions, and recursion."}],["$","$L4",null,{"examples":[{"label":"Random Trees","code":"(define-type tree (Leaf) (Node nat tree tree))\n\n(define (random-tree)\n  (if (flip 0.6)\n    (Leaf)\n    (let ((left  (random-tree))\n          (right (random-tree)))\n      (Node (geom 0.5) left right))))","expr":"random-tree","samples":["Node 2 (Leaf) (Node 0 (Leaf) (Leaf))","Leaf","Node 1 (Leaf) (Leaf)"]},{"label":"Modeling Typos","code":"(define-type char (a_) (b_) (c_) ... (z_))\n\n(define (random_char)\n  (uniform (a_) (b_) ... (z_)))\n\n(define (maybe_insert s)\n  (if (flip 0.99) s (Cons (random_char) (maybe_insert s))))\n\n(define (maybe_cons c cs)\n  (if (flip 0.99) (Cons c cs) cs))\n\n(define (maybe_substitute c)\n  (if (flip 0.99) c (random_char)))\n\n(define (perturb s)\n  (match s\n    Nil => (maybe_insert (Nil))\n    Cons c cs =>\n      (let ((perturbed_cs (perturb cs)))\n        (maybe_insert (maybe_cons (maybe_substitute c) perturbed_cs)))))","expr":"(perturb (Cons (c_) (Cons (a_) (Cons (t_) (Nil)))))","samples":["[(c_), (a_), (t_)]","[(c_), (a_), (g_)]","[(c_), (a_), (t_)]"]},{"label":"Network Verification","code":"(define (diamond s1)\n  (let (route (flip 0.5)\n              drop (flip 0.0001))\n    (and (or (not drop) route) s1)))\n\n(define (network n)\n  (match n\n    O => (True)\n    S m => (diamond (network m))))","expr":"(network 5)","samples":["true","true","false"]},{"label":"Probabilistic Grammars","code":"$5","expr":"(generate-english (Sent))","samples":["[(the_), (happy_), (cat_), (eats_), (the_), (tasty_), (bone_)]","[(a_), (dog_), (barks_), (and_), (the_), (cat_), (eats_), (the_), (bone_)]","[(the_), (cat_), (eats_), (but_), (a_), (sad_), (dog_), (barks_)]","[(the_), (tasty_), (bone_), (barks_)]","[(a_), (happy_), (dog_), (eats_), (the_), (bone_)]","[(the_), (cat_), (eats_), (the_), (tasty_), (bone_), (and_), (a_), (dog_), (barks_)]"]},{"label":"Infinite HMM","code":"(define (transition state)\n  (if state\n    (flip 0.4)\n    (flip 0.6)))\n\n(define (generate-observation state)\n  (if state\n    (flip 0.9)\n    (flip 0.4)))\n\n(define (hmm state)\n  (let ((next-state (transition state)))\n    (Cons\n     (Pair state (generate-observation state))\n     (hmm next-state))))","expr":"(take 3 (hmm (flip 0.5)))","samples":["[(true, true), (false, true), (false, false)]","[(false, false), (false, false), (true, true)]","[(true, true), (true, true), (true, false)]"]}]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"text-xl font-semibold mb-1","children":"Exact Inference"}],["$","p",null,{"className":"mb-3 text-gray-700","children":"Pluck can compute the exact probability distributions of many expressions."}],["$","$L6",null,{"examples":[{"label":"Random Trees","query":";; What is the probability that a random tree has fewer than 4 nodes?\n(query tree-size-small\n  (Marginal (< (length (nodes (random-tree))) 4)))","output":"tree-size-small:\n  true   0.855\n  false  0.145"},{"label":"Modeling Typos","query":";; What is the probability that the string \"lazy\" is perturbed to \"lucky\"?\n(query lazy-to-lucky\n  (Marginal\n    (string=?\n      (perturb (Cons (l_) (Cons (a_) (Cons (z_) (Cons (y_) (Nil))))))\n      (Cons (l_) (Cons (u_) (Cons (c_) (Cons (k_) (Cons (y_) (Nil)))))))))","output":"lazy-to-lucky:\n  false  0.99999999998\n  true   2.061e-11"},{"label":"Network Verification","query":";; What is the probability that a 100-stage network delivers the packet?\n(query network-100\n  (Marginal (network 100)))","output":"network-100:\n  true   0.995\n  false  0.005"},{"label":"Probabilistic Grammars","query":";; What is the marginal distribution on the third word of a generated sentence?\n(query grammar-third-word\n  (Marginal (index 2 (generate-english (Sent)))))","output":"grammar-third-word:\n  (eats_)   0.52\n  (barks_)  0.18\n  (cat_)    0.07\n  (dog_)    0.07\n  (bone_)   0.07\n  (happy_)  0.03\n  (sad_)    0.03\n  (tasty_)  0.03"},{"label":"Infinite HMM","query":";; What is the marginal distribution of the 50th latent state in an HMM?\n(query hmm-latent-50\n  (let ((chain (hmm (flip 0.5))))\n    (Marginal (fst (index 49 chain)))))","output":"hmm-latent-50:\n  true   0.5\n  false  0.5"}]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"text-xl font-semibold mb-1","children":"Bayesian Conditioning"}],["$","p",null,{"className":"mb-3 text-gray-700","children":"Pluck can also compute the exact conditional (i.e., posterior) distribution of an expression, given some Boolean condition."}],["$","$L4",null,{"examples":[{"label":"Random Trees","code":"(query bst-given-size8-bounded\n  (let ((t (random-tree)))\n    (Posterior\n      (isBST t)\n      (and (== (size t) 8) (all-nodes-between t 0 10)))))","expr":"bst-given-size8-bounded","samples":["bst-given-size8-bounded:","  false   0.9999999999998865","  true    1.1346479311669095e-13"]},{"label":"Modeling Typos","code":"(query goat-or-bat\n  (let ((original_string\n          (if (flip 0.5)\n            (Cons (g_) (Cons (o_) (Cons (a_) (Cons (t_) (Nil)))))\n            (Cons (b_) (Cons (a_) (Cons (t_) (Nil))))))\n        (observed_string\n          (Cons (g_) (Cons (a_) (Cons (t_) (Nil))))))\n    (Posterior\n      original_string\n      (string=? (perturb original_string) observed_string))))","expr":"goat-or-bat","samples":["goat-or-bat:","  [(g_), (o_), (a_), (t_)]  0.962","  [(b_), (a_), (t_)]        0.038"]},{"label":"Probabilistic Grammars","code":"(query grammar-second-word-given-dog\n  (let ((sentence (generate-english (Sent))))\n    (Posterior\n      (index 1 sentence)\n      (constructor=? (index 2 sentence) (dog_)))))","expr":"grammar-second-word-given-dog","samples":["grammar-second-word-given-dog:","  (happy_)  0.333","  (sad_)    0.333","  (tasty_)  0.333"]},{"label":"Infinite HMM","code":"(query hmm-latents-given-observed\n  (let ((chain (hmm (flip 0.5))))\n    (Posterior\n      (map fst (take 3 chain))\n      (and (snd (index 0 chain))\n           (and (not (snd (index 1 chain)))\n                (snd (index 2 chain))))))","expr":"hmm-latents-given-observed","samples":["hmm-latents-given-observed:","  [true, false, true]    0.5301818181818183","  [false, false, true]   0.15709090909090914","  [true, false, false]   0.15709090909090911","  [false, false, false]  0.046545454545454557","  [true, true, true]     0.03927272727272728","  [false, true, true]    0.026181818181818185","  [true, true, false]    0.026181818181818185","  [false, true, false]   0.017454545454545455"]}],"outputLabel":"Output"}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"text-xl font-semibold mb-1","children":"Posterior Sampling"}],["$","p",null,{"className":"mb-3 text-gray-700","children":"Pluck can draw exact samples from posterior distributions, even in infinite spaces."}],["$","$L4",null,{"examples":[{"label":"Random Trees","code":"(query tree-samples-given-size8-bst-bounded\n  (let ((t (random-tree)))\n    (PosteriorSamples\n      t\n      (and (== (size t) 8)\n           (all-nodes-between t 0 10)\n           (isBST t))\n      5)))","expr":"tree-samples-given-size8-bst-bounded","samples":["(Node 9 (Node 7 (Node 6 (Node 4 (Node 3 (Node 2 (Node 1 (Leaf) (Leaf)) (Leaf)) (Leaf)) (Node 5 (Leaf) (Leaf))) (Leaf)) (Leaf)) (Leaf))","(Node 8 (Node 5 (Node 4 (Node 2 (Node 1 (Leaf) (Leaf)) (Node 3 (Leaf) (Leaf))) (Leaf)) (Node 6 (Leaf) (Leaf))) (Node 9 (Leaf) (Leaf)))","(Node 8 (Node 7 (Node 5 (Node 1 (Leaf) (Node 4 (Node 2 (Leaf) (Node 3 (Leaf) (Leaf))) (Leaf))) (Node 6 (Leaf) (Leaf))) (Leaf)) (Leaf))","(Node 8 (Node 6 (Node 3 (Node 1 (Leaf) (Node 2 (Leaf) (Leaf))) (Node 4 (Leaf) (Node 5 (Leaf) (Leaf)))) (Node 7 (Leaf) (Leaf))) (Leaf))","(Node 8 (Node 7 (Node 6 (Node 1 (Leaf) (Node 3 (Node 2 (Leaf) (Leaf)) (Node 5 (Node 4 (Leaf) (Leaf)) (Leaf)))) (Leaf)) (Leaf)) (Leaf))"]},{"label":"Modeling Typos","code":"(query cat-third-char\n  (let ((typed-string\n          (perturb\n          (Cons (c_) (Cons (a_) (Cons (t_) (Nil)))))))\n    (PosteriorSamples\n      typed-string\n      (constructor=? (index 2 typed-string) (a_))\n      5)))","expr":"cat-third-char","samples":["[(c_), (r_), (a_), (t_)]","[(d_), (c_), (a_), (t_)]","[(b_), (c_), (a_), (t_)]","[(v_), (c_), (a_), (t_)]","[(c_), (c_), (a_), (t_)]"]},{"label":"Probabilistic Grammars","code":"(query grammar-samples-fifth-tasty\n  (let ((sentence (generate-english (Sent))))\n    (PosteriorSamples\n      sentence\n      (constructor=? (index 4 sentence) (tasty_))\n      5)))","expr":"grammar-samples-fifth-tasty","samples":["[(a_), (bone_), (eats_), (the_), (tasty_), (dog_)]","[(a_), (cat_), (eats_), (the_), (tasty_), (dog_), (but_), (a_), (dog_), (eats_), (and_), (a_), (sad_), (dog_), (eats_), (the_), (dog_)]","[(the_), (bone_), (eats_), (a_), (tasty_), (bone_)]","[(a_), (dog_), (eats_), (a_), (tasty_), (happy_), (dog_)]","[(a_), (dog_), (eats_), (the_), (tasty_), (sad_), (cat_)]"]},{"label":"Infinite HMM","code":"(query hmm-samples-latents-given-observed\n  (let ((chain (hmm (flip 0.5))))\n    (PosteriorSamples\n        (map fst (take 5 chain))\n        (and (and (snd (index 0 chain))\n                (and (not (snd (index 1 chain)))\n                        (snd (index 2 chain))))\n            (and (not (snd (index 3 chain)))\n                (snd (index 4 chain))))\n        5)))","expr":"hmm-samples-latents-given-observed","samples":["[true, false, false, false, true]","[true, false, true, false, true]","[true, false, true, false, true]","[true, false, true, false, true]","[false, false, true, true, true]"]}]}]]}]]}]]}],null]]},[null,["$","html",null,{"lang":"en","className":"h-full","children":["$","body",null,{"className":"__className_e8ce0c h-full bg-white","children":["$","div",null,{"className":"min-h-full","children":[["$","nav",null,{"className":"bg-white shadow-sm relative z-20","children":["$","div",null,{"className":"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8","children":["$","div",null,{"className":"flex h-16 justify-between items-center","children":[["$","div",null,{"className":"flex items-center","children":["$","$L2",null,{"href":"/","className":"flex items-center text-2xl font-bold text-primary-600 gap-2","children":[["$","img",null,{"src":"/pluck-feather.png","alt":"Pluck feather logo","className":"h-7 w-auto","style":{"filter":"invert(41%) sepia(98%) saturate(2227%) hue-rotate(172deg) brightness(97%) contrast(101%)"}}],"Pluck"]}]}],["$","div",null,{"className":"hidden sm:ml-6 sm:flex sm:space-x-8","children":[["$","$L7",null,{"href":"/","children":"Home"}],["$","$L7",null,{"href":"/docs","children":"Documentation"}],["$","a",null,{"href":"https://github.com/mlb2251/Pluck.jl","className":"inline-flex items-center border-b-2 border-transparent px-1 pt-1 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700","children":"GitHub"}]]}],["$","$L8",null,{}]]}]}]}],["$","main",null,{"children":["$","div",null,{"className":"mx-auto max-w-7xl py-6 sm:px-6 lg:px-8","children":["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]}],["$","footer",null,{"className":"bg-white","children":["$","div",null,{"className":"mx-auto max-w-7xl px-4 py-12 sm:px-6 md:flex md:items-center md:justify-between lg:px-8","children":["$","div",null,{"className":"mt-8 md:mt-0","children":["$","p",null,{"className":"text-center text-base text-gray-400","children":"© 2025 Pluck. All rights reserved."}]}]}]}]]}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/76b7db6947d7b8d8.css","precedence":"next","crossOrigin":""}]],"$Lb"]]]]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Pluck - A Probabilistic Programming Language"}],["$","meta","3",{"name":"description","content":"Pluck is a probabilistic programming language designed for efficient inference on discrete probabilistic models."}],["$","meta","4",{"name":"next-size-adjust"}]]
1:null
